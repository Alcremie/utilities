{"version":3,"file":"index.mjs","sources":["../src/lib/DurationFormatter.ts","../src/lib/constants.ts","../src/lib/Cron.ts","../../utilities/dist/index.mjs","../src/lib/Duration.ts","../src/lib/Timestamp.ts","../src/lib/TimerManager.ts"],"sourcesContent":["import { DEFAULT_UNITS } from './constants';\n\n/**\n * The supported time types\n */\nexport const enum TimeTypes {\n\tSecond = 'second',\n\tMinute = 'minute',\n\tHour = 'hour',\n\tDay = 'day',\n\tWeek = 'week',\n\tMonth = 'month',\n\tYear = 'year'\n}\n\n/**\n * The duration of each time type in milliseconds\n */\nconst kTimeDurations: readonly [TimeTypes, number][] = [\n\t[TimeTypes.Year, 31536000000],\n\t// 29.53059 days is the official duration of a month: https://en.wikipedia.org/wiki/Month\n\t[TimeTypes.Month, 2628000000],\n\t[TimeTypes.Week, 1000 * 60 * 60 * 24 * 7],\n\t[TimeTypes.Day, 1000 * 60 * 60 * 24],\n\t[TimeTypes.Hour, 1000 * 60 * 60],\n\t[TimeTypes.Minute, 1000 * 60],\n\t[TimeTypes.Second, 1000]\n];\n\n/**\n * Display the duration\n * @param duration The duration in milliseconds to parse and display\n * @param assets The language assets\n */\nexport class DurationFormatter {\n\tpublic constructor(public units: DurationFormatAssetsTime = DEFAULT_UNITS) {}\n\n\tpublic format(duration: number, precision = 7) {\n\t\tconst output: string[] = [];\n\t\tconst negative = duration < 0;\n\t\tif (negative) duration *= -1;\n\n\t\tfor (const [type, timeDuration] of kTimeDurations) {\n\t\t\tconst substraction = duration / timeDuration;\n\t\t\tif (substraction < 1) continue;\n\n\t\t\tconst floored = Math.floor(substraction);\n\t\t\tduration -= floored * timeDuration;\n\t\t\toutput.push(addUnit(floored, this.units[type]));\n\n\t\t\t// If the output has enough precision, break\n\t\t\tif (output.length >= precision) break;\n\t\t}\n\n\t\treturn `${negative ? '-' : ''}${output.join(' ') || addUnit(0, this.units.second)}`;\n\t}\n}\n\n/**\n * Adds an unit, if non zero\n * @param time The duration of said unit\n * @param unit The unit language assets\n */\nfunction addUnit(time: number, unit: DurationFormatAssetsUnit) {\n\tif (Reflect.has(unit, time)) return `${time} ${Reflect.get(unit, time)}`;\n\treturn `${time} ${unit.DEFAULT}`;\n}\n\ninterface DurationFormatAssetsUnit extends Record<number, string> {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tDEFAULT: string;\n}\n\nexport interface DurationFormatAssetsTime {\n\t[TimeTypes.Second]: DurationFormatAssetsUnit;\n\t[TimeTypes.Minute]: DurationFormatAssetsUnit;\n\t[TimeTypes.Hour]: DurationFormatAssetsUnit;\n\t[TimeTypes.Day]: DurationFormatAssetsUnit;\n\t[TimeTypes.Week]: DurationFormatAssetsUnit;\n\t[TimeTypes.Month]: DurationFormatAssetsUnit;\n\t[TimeTypes.Year]: DurationFormatAssetsUnit;\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport { DurationFormatAssetsTime, TimeTypes } from './DurationFormatter';\n\nexport const enum Time {\n\tMillisecond = 1,\n\tSecond = 1000,\n\tMinute = 1000 * 60,\n\tHour = 1000 * 60 * 60,\n\tDay = 1000 * 60 * 60 * 24,\n\tMonth = 1000 * 60 * 60 * 24 * (365 / 12),\n\tYear = 1000 * 60 * 60 * 24 * 365\n}\n\nexport const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexport const tokens = new Map<string, number>([\n\t['Y', 4],\n\t['Q', 1],\n\t['M', 4],\n\t['D', 4],\n\t['d', 4],\n\t['X', 1],\n\t['x', 1],\n\t['H', 2],\n\t['h', 2],\n\t['a', 1],\n\t['A', 1],\n\t['m', 2],\n\t['s', 2],\n\t['S', 3],\n\t['Z', 2],\n\t['l', 4],\n\t['L', 4],\n\t['T', 1],\n\t['t', 1]\n]);\n\nexport const partRegex = /^(?:(\\*)|(\\d+)(?:-(\\d+))?)(?:\\/(\\d+))?$/;\n\nexport const wildcardRegex = /\\bh\\b|\\B\\?\\B/g;\n\nexport const allowedNum = [\n\t[0, 59],\n\t[0, 23],\n\t[1, 31],\n\t[1, 12],\n\t[0, 6]\n];\n\nexport const predefined = {\n\t'@annually': '0 0 1 1 *',\n\t'@yearly': '0 0 1 1 *',\n\t'@monthly': '0 0 1 * *',\n\t'@weekly': '0 0 * * 0',\n\t'@daily': '0 0 * * *',\n\t'@hourly': '0 * * * *'\n} as const;\n\nexport const cronTokens = {\n\tjan: 1,\n\tfeb: 2,\n\tmar: 3,\n\tapr: 4,\n\tmay: 5,\n\tjun: 6,\n\tjul: 7,\n\taug: 8,\n\tsep: 9,\n\toct: 10,\n\tnov: 11,\n\tdec: 12,\n\tsun: 0,\n\tmon: 1,\n\ttue: 2,\n\twed: 3,\n\tthu: 4,\n\tfri: 5,\n\tsat: 6\n} as const;\n\nexport const tokensRegex = new RegExp(Object.keys(cronTokens).join('|'), 'g');\n\nexport const DEFAULT_UNITS: DurationFormatAssetsTime = {\n\t[TimeTypes.Year]: {\n\t\t1: 'year',\n\t\tDEFAULT: 'years'\n\t},\n\t[TimeTypes.Month]: {\n\t\t1: 'month',\n\t\tDEFAULT: 'months'\n\t},\n\t[TimeTypes.Week]: {\n\t\t1: 'week',\n\t\tDEFAULT: 'weeks'\n\t},\n\t[TimeTypes.Day]: {\n\t\t1: 'day',\n\t\tDEFAULT: 'days'\n\t},\n\t[TimeTypes.Hour]: {\n\t\t1: 'hour',\n\t\tDEFAULT: 'hours'\n\t},\n\t[TimeTypes.Minute]: {\n\t\t1: 'minute',\n\t\tDEFAULT: 'minutes'\n\t},\n\t[TimeTypes.Second]: {\n\t\t1: 'second',\n\t\tDEFAULT: 'seconds'\n\t}\n};\n","/* eslint-disable @typescript-eslint/restrict-plus-operands */\nimport { range } from '@sapphire/utilities';\nimport { allowedNum, cronTokens, partRegex, predefined, Time, tokensRegex, wildcardRegex } from './constants';\n\n/**\n * Handles Cron strings and generates dates based on the cron string provided.\n * @see https://en.wikipedia.org/wiki/Cron\n */\nexport class Cron {\n\tpublic cron: string;\n\tpublic normalized: string;\n\tpublic minutes: number[];\n\tpublic hours: number[];\n\tpublic days: number[];\n\tpublic months: number[];\n\tpublic dows: number[];\n\n\t/**\n\t * @param cron The cron pattern to use\n\t */\n\tpublic constructor(cron: string) {\n\t\tthis.cron = cron.toLowerCase();\n\t\tthis.normalized = Cron.normalize(this.cron);\n\t\t[this.minutes, this.hours, this.days, this.months, this.dows] = Cron.parseString(this.normalized);\n\t}\n\n\t/**\n\t * Get the next date that matches with the current pattern\n\t * @param outset The Date instance to compare with\n\t * @param origin Whether this next call is origin\n\t */\n\tpublic next(outset: Date = new Date(), origin = true): Date {\n\t\tif (!this.days.includes(outset.getUTCDate()) || !this.months.includes(outset.getUTCMonth() + 1) || !this.dows.includes(outset.getUTCDay())) {\n\t\t\treturn this.next(new Date(outset.getTime() + Time.Day), false);\n\t\t}\n\t\tif (!origin) return new Date(Date.UTC(outset.getUTCFullYear(), outset.getUTCMonth(), outset.getUTCDate(), this.hours[0], this.minutes[0]));\n\n\t\tconst now = new Date(outset.getTime() + 60000);\n\n\t\tfor (const hour of this.hours) {\n\t\t\tif (hour < now.getUTCHours()) continue;\n\t\t\tfor (const minute of this.minutes) {\n\t\t\t\tif (hour === now.getUTCHours() && minute < now.getUTCMinutes()) continue;\n\t\t\t\treturn new Date(Date.UTC(outset.getUTCFullYear(), outset.getUTCMonth(), outset.getUTCDate(), hour, minute));\n\t\t\t}\n\t\t}\n\n\t\treturn this.next(new Date(outset.getTime() + Time.Day), false);\n\t}\n\n\t/**\n\t * Normalize the pattern\n\t * @param cron The pattern to normalize\n\t */\n\tprivate static normalize(cron: string): string {\n\t\tif (Reflect.has(predefined, cron)) return Reflect.get(predefined, cron);\n\t\tconst now = new Date();\n\t\tcron = cron\n\t\t\t.split(' ')\n\t\t\t.map((val, i) =>\n\t\t\t\tval.replace(wildcardRegex, (match) => {\n\t\t\t\t\tif (match === 'h') return (Math.floor(Math.random() * allowedNum[i][1]) + allowedNum[i][0]).toString();\n\n\t\t\t\t\tif (match === '?') {\n\t\t\t\t\t\tswitch (i) {\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\treturn now.getUTCMinutes().toString();\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn now.getUTCHours().toString();\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\treturn now.getUTCDate().toString();\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\treturn now.getUTCMonth().toString();\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\treturn now.getUTCDay().toString();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t})\n\t\t\t)\n\t\t\t.join(' ');\n\t\treturn cron.replace(tokensRegex, (match) => String(Reflect.get(cronTokens, match)));\n\t}\n\n\t/**\n\t * Parse the pattern\n\t * @param cron The pattern to parse\n\t */\n\tprivate static parseString(cron: string): Array<number[]> {\n\t\tconst parts = cron.split(' ');\n\t\tif (parts.length !== 5) throw new Error('Invalid Cron Provided');\n\t\treturn parts.map((part, i) => Cron.parsePart(part, i));\n\t}\n\n\t/**\n\t * Parse the current part\n\t * @param cronPart The part of the pattern to parse\n\t * @param id The id that identifies the current part\n\t */\n\tprivate static parsePart(cronPart: string, id: number): number[] {\n\t\tif (cronPart.includes(',')) {\n\t\t\tconst res = [];\n\t\t\tfor (const part of cronPart.split(',')) res.push(...Cron.parsePart(part, id));\n\t\t\treturn [...new Set(res)].sort((a, b) => a - b);\n\t\t}\n\n\t\t// eslint-disable-next-line prefer-const\n\t\tconst [, wild, minStr, maxStr, step] = partRegex.exec(cronPart)!;\n\t\tlet [min, max] = [parseInt(minStr, 10), parseInt(maxStr, 10)];\n\n\t\t// If '*', set min and max as the minimum and maximum allowed numbers:\n\t\tif (wild) [min, max] = allowedNum[id];\n\t\t// Else if a number was given, but not a maximum nor a step, return it\n\t\t// as only allowed value:\n\t\telse if (!max && !step) return [min];\n\n\t\t// Set min and max as the given numbers, defaulting max to the maximum\n\t\t// allowed, so min is never bigger than max:\n\t\t// This makes min and max be, in the following cases (considering minutes):\n\t\t// -> 1-2 | 1..2\n\t\t// -> 2-1 | 1..2\n\t\t// -> 1/7 | 1, 8, 15, 22, 29, 36, 43, 50, 57\n\t\t[min, max] = [min, max || allowedNum[id][1]].sort((a, b) => a - b);\n\n\t\t// Generate a range\n\t\treturn range(min, max, parseInt(step, 10) || 1);\n\t}\n}\n","function arrayStrictEquals(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n]||typeof e[n]!=typeof t[n])return!1;return!0}function chunk(e,t){if(!Array.isArray(e))throw new TypeError(\"entries must be an array.\");if(!Number.isInteger(t))throw new TypeError(\"chunkSize must be an integer.\");if(t<1)throw new RangeError(\"chunkSize must be 1 or greater.\");const n=e.slice(),r=[];for(;n.length;)r.push(n.splice(0,t));return r}function classExtends(e,t){let n=e;for(;null!==n;){if(n===t)return!0;n=Object.getPrototypeOf(n)}return!1}const e=String.fromCharCode(8203);function codeBlock(t,n){return\"string\"==typeof n?0===n.length?`\\`\\`\\`${e}\\`\\`\\``:`\\`\\`\\`${t}\\n${n.replace(/```/,`\\`${e}\\`\\``).replace(/`$/g,\"`\"+e)}\\`\\`\\``:`\\`\\`\\`${t}\\n${n||e}\\`\\`\\``}function splitText(e,t,n=\" \"){const r=e.substring(0,t).lastIndexOf(n),o=-1===r?t:r;return e.substring(0,o)}function cutText(e,t){if(e.length<t)return e;const n=splitText(e,t-3);return n.length<t-3?n+\"...\":n.slice(0,t-3)+\"...\"}function isObject(e){return!(\"object\"!=typeof e||!e)&&e.constructor===Object}const t=[\"string\",\"bigint\",\"number\",\"boolean\"];function isPrimitive(e){return t.includes(typeof e)}function deepClone(e){if(null===e||isPrimitive(e))return e;if(Array.isArray(e)){const t=[];for(const n of e)t.push(deepClone(n));return t}if(isObject(e)){const t={};for(const[n,r]of Object.entries(e))t[n]=deepClone(r);return t}if(e instanceof Map){const t=new e.constructor;for(const[n,r]of e.entries())t.set(n,deepClone(r));return t}if(e instanceof Set){const t=new e.constructor;for(const n of e.values())t.add(deepClone(n));return t}return e}const n=String.fromCharCode(8203);function inlineCodeBlock(e){return`\\`${e.replace(/ /g,\" \").replace(/`/g,\"`\"+n)}\\``}function isClass(e){return\"function\"==typeof e&&\"object\"==typeof e.prototype}function isFunction(e){return\"function\"==typeof e}function isNullOrUndefined(e){return null==e}function isNumber(e){return\"number\"==typeof e&&!isNaN(e)&&Number.isFinite(e)}function isThenable(e){return\"object\"==typeof e&&null!==e&&(e instanceof Promise||e!==Promise.prototype&&function hasThen(e){return Reflect.has(e,\"then\")&&isFunction(e.then)}(e)&&function hasCatch(e){return Reflect.has(e,\"catch\")&&isFunction(e.catch)}(e))}function makeObject(e,t,n={}){if(e.includes(\".\")){const r=e.split(\".\"),o=r.pop();let c=n;for(const e of r)c[e]||(c[e]={}),c=c[e];c[o]=t}else n[e]=t;return n}function mergeDefault(e,t){if(!t)return deepClone(e);for(const[n,r]of Object.entries(e)){const e=Reflect.get(t,n);void 0===e?Reflect.set(t,n,deepClone(r)):isObject(e)&&Reflect.set(t,n,mergeDefault(null!=r?r:{},e))}return t}function mergeObjects(e,t){for(const[n,r]of Object.entries(t)){const t=Reflect.get(e,n);isObject(r)?Reflect.set(e,n,isObject(t)?mergeObjects(t,r):r):isObject(t)||Reflect.set(e,n,r)}return e}function noop(){}function objectToTuples(e,t=\"\"){const n=[];for(const[r,o]of Object.entries(e))isObject(o)?n.push(...objectToTuples(o,`${t}${r}.`)):n.push([`${t}${r}`,o]);return n}function parseURL(e){try{return new URL(e)}catch{return null}}function range(e,t,n){return new Array(Math.floor((t-e)/n)+1).fill(0).map(((t,r)=>e+r*n))}const r=/[-/\\\\^$*+?.()|[\\]{}]/g;function regExpEsc(e){return e.replace(r,\"\\\\$&\")}function roundNumber(e,t=0){if(!e.toString().includes(\"e\"))return Number(`${Math.round(Number(`${e}e+${t}`))}e-${t}`);const n=(\"\"+e).split(\"e\");let r=\"\";return Number(n[1])+t>0&&(r=\"+\"),Number(`${Math.round(Number(`${Number(n[0])}e${r}${Number(n[1])+t}`))}e-${t}`)}const o=/[A-Za-zÀ-ÖØ-öø-ÿ]\\S*/g,c={textchannel:\"TextChannel\",voicechannel:\"VoiceChannel\",categorychannel:\"CategoryChannel\",guildmember:\"GuildMember\"};function toTitleCase(e){return e.replace(o,(e=>c[e]||e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()))}function tryParse(e){try{return JSON.parse(e)}catch(t){return e}}export{arrayStrictEquals,chunk,classExtends,codeBlock,cutText,deepClone,inlineCodeBlock,isClass,isFunction,isNullOrUndefined,isNullOrUndefined as isNullish,isNumber,isObject,isPrimitive,isThenable,makeObject,mergeDefault,mergeObjects,noop,objectToTuples,parseURL,range,regExpEsc,roundNumber,splitText,toTitleCase,tryParse};\n//# sourceMappingURL=index.mjs.map\n","/* eslint-disable @typescript-eslint/restrict-plus-operands */\nconst tokens = new Map([\n\t['nanosecond', 1 / 1e6],\n\t['nanoseconds', 1 / 1e6],\n\t['ns', 1 / 1e6],\n\n\t['millisecond', 1],\n\t['milliseconds', 1],\n\t['ms', 1],\n\n\t['second', 1000],\n\t['seconds', 1000],\n\t['sec', 1000],\n\t['secs', 1000],\n\t['s', 1000],\n\n\t['minute', 1000 * 60],\n\t['minutes', 1000 * 60],\n\t['min', 1000 * 60],\n\t['mins', 1000 * 60],\n\t['m', 1000 * 60],\n\n\t['hour', 1000 * 60 * 60],\n\t['hours', 1000 * 60 * 60],\n\t['hr', 1000 * 60 * 60],\n\t['hrs', 1000 * 60 * 60],\n\t['h', 1000 * 60 * 60],\n\n\t['day', 1000 * 60 * 60 * 24],\n\t['days', 1000 * 60 * 60 * 24],\n\t['d', 1000 * 60 * 60 * 24],\n\n\t['week', 1000 * 60 * 60 * 24 * 7],\n\t['weeks', 1000 * 60 * 60 * 24 * 7],\n\t['wk', 1000 * 60 * 60 * 24 * 7],\n\t['wks', 1000 * 60 * 60 * 24 * 7],\n\t['w', 1000 * 60 * 60 * 24 * 7],\n\n\t['month', 1000 * 60 * 60 * 24 * (365.25 / 12)],\n\t['months', 1000 * 60 * 60 * 24 * (365.25 / 12)],\n\t['b', 1000 * 60 * 60 * 24 * (365.25 / 12)],\n\t['mo', 1000 * 60 * 60 * 24 * (365.25 / 12)],\n\n\t['year', 1000 * 60 * 60 * 24 * 365.25],\n\t['years', 1000 * 60 * 60 * 24 * 365.25],\n\t['yr', 1000 * 60 * 60 * 24 * 365.25],\n\t['yrs', 1000 * 60 * 60 * 24 * 365.25],\n\t['y', 1000 * 60 * 60 * 24 * 365.25]\n]);\n\n/**\n * Converts duration strings into ms and future dates\n */\nexport class Duration {\n\t/**\n\t * The offset\n\t */\n\tpublic offset: number;\n\n\t/**\n\t * Create a new Duration instance\n\t * @param pattern The string to parse\n\t */\n\tpublic constructor(pattern: string) {\n\t\tthis.offset = Duration.parse(pattern.toLowerCase());\n\t}\n\n\t/**\n\t * Get the date from now\n\t */\n\tpublic get fromNow(): Date {\n\t\treturn this.dateFrom(new Date());\n\t}\n\n\t/**\n\t * Get the date from\n\t * @param date The Date instance to get the date from\n\t */\n\tpublic dateFrom(date: Date): Date {\n\t\treturn new Date(date.getTime() + this.offset);\n\t}\n\n\t/**\n\t * The RegExp used for the pattern parsing\n\t */\n\tprivate static readonly kPatternRegex = /(-?\\d*\\.?\\d+(?:e[-+]?\\d+)?)\\s*([a-zμ]*)/gi;\n\n\t/**\n\t * The RegExp used for removing commas\n\t */\n\tprivate static readonly kCommaRegex = /,/g;\n\n\t/**\n\t * The RegExp used for replacing a/an with 1\n\t */\n\tprivate static readonly kAanRegex = /\\ban?\\b/gi;\n\n\t/**\n\t * Parse the pattern\n\t * @param pattern The pattern to parse\n\t */\n\tprivate static parse(pattern: string): number {\n\t\tlet result = 0;\n\n\t\tpattern\n\t\t\t// ignore commas\n\t\t\t.replace(Duration.kCommaRegex, '')\n\t\t\t// a / an = 1\n\t\t\t.replace(Duration.kAanRegex, '1')\n\t\t\t// do math\n\t\t\t.replace(Duration.kPatternRegex, (_, i, units) => {\n\t\t\t\tunits = tokens.get(units) ?? 0;\n\t\t\t\tresult += Number(i) * units;\n\t\t\t\treturn '';\n\t\t\t});\n\n\t\treturn result;\n\t}\n}\n","import { days, months, Time, tokens } from './constants';\n\ninterface TokenResolver {\n\t(time: Date): string;\n}\n\nconst tokenResolvers = new Map<string, TokenResolver>([\n\t// Dates\n\t['Y', (time) => String(time.getFullYear()).slice(2)],\n\t['YY', (time) => String(time.getFullYear()).slice(2)],\n\t['YYY', (time) => String(time.getFullYear())],\n\t['YYYY', (time) => String(time.getFullYear())],\n\t['Q', (time) => String((time.getMonth() + 1) / 3)],\n\t['M', (time) => String(time.getMonth() + 1)],\n\t['MM', (time) => String(time.getMonth() + 1).padStart(2, '0')],\n\t['MMM', (time) => months[time.getMonth()]],\n\t['MMMM', (time) => months[time.getMonth()]],\n\t['D', (time) => String(time.getDate())],\n\t['DD', (time) => String(time.getDate()).padStart(2, '0')],\n\t['DDD', (time) => String(Math.floor((time.getTime() - new Date(time.getFullYear(), 0, 0).getTime()) / Time.Day))],\n\t['DDDD', (time) => String(Math.floor((time.getTime() - new Date(time.getFullYear(), 0, 0).getTime()) / Time.Day))],\n\t[\n\t\t'd',\n\t\t(time) => {\n\t\t\tconst day = String(time.getDate());\n\t\t\tif (day !== '11' && day.endsWith('1')) return `${day}st`;\n\t\t\tif (day !== '12' && day.endsWith('2')) return `${day}nd`;\n\t\t\tif (day !== '13' && day.endsWith('3')) return `${day}rd`;\n\t\t\treturn `${day}th`;\n\t\t}\n\t],\n\t['dd', (time) => days[time.getDay()].slice(0, 2)],\n\t['ddd', (time) => days[time.getDay()].slice(0, 3)],\n\t['dddd', (time) => days[time.getDay()]],\n\t['X', (time) => String(time.valueOf() / Time.Second)],\n\t['x', (time) => String(time.valueOf())],\n\n\t// Locales\n\t['H', (time) => String(time.getHours())],\n\t['HH', (time) => String(time.getHours()).padStart(2, '0')],\n\t['h', (time) => String(time.getHours() % 12 || 12)],\n\t['hh', (time) => String(time.getHours() % 12 || 12).padStart(2, '0')],\n\t['a', (time) => (time.getHours() < 12 ? 'am' : 'pm')],\n\t['A', (time) => (time.getHours() < 12 ? 'AM' : 'PM')],\n\t['m', (time) => String(time.getMinutes())],\n\t['mm', (time) => String(time.getMinutes()).padStart(2, '0')],\n\t['s', (time) => String(time.getSeconds())],\n\t['ss', (time) => String(time.getSeconds()).padStart(2, '0')],\n\t['S', (time) => String(time.getMilliseconds())],\n\t['SS', (time) => String(time.getMilliseconds()).padStart(2, '0')],\n\t['SSS', (time) => String(time.getMilliseconds()).padStart(3, '0')],\n\t['T', (time) => `${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`],\n\t[\n\t\t't',\n\t\t(time) =>\n\t\t\t`${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')}:${String(time.getSeconds()).padStart(2, '0')} ${\n\t\t\t\ttime.getHours() < 12 ? 'am' : 'pm'\n\t\t\t}`\n\t],\n\t['L', (time) => `${String(time.getMonth() + 1).padStart(2, '0')}/${String(time.getDate()).padStart(2, '0')}/${String(time.getFullYear())}`],\n\t['l', (time) => `${String(time.getMonth() + 1)}/${String(time.getDate()).padStart(2, '0')}/${String(time.getFullYear())}`],\n\t['LL', (time) => `${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())}`],\n\t['ll', (time) => `${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())}`],\n\t[\n\t\t'LLL',\n\t\t(time) =>\n\t\t\t`${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'lll',\n\t\t(time) =>\n\t\t\t`${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'LLLL',\n\t\t(time) =>\n\t\t\t`${days[time.getDay()]}, ${months[time.getMonth()]} ${String(time.getDate()).padStart(2, '0')}, ${String(time.getFullYear())} ${String(\n\t\t\t\ttime.getHours() % 12 || 12\n\t\t\t)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'llll',\n\t\t(time) =>\n\t\t\t`${days[time.getDay()].slice(0, 3)} ${months[time.getMonth()].slice(0, 3)} ${String(time.getDate()).padStart(2, '0')}, ${String(\n\t\t\t\ttime.getFullYear()\n\t\t\t)} ${String(time.getHours() % 12 || 12)}:${String(time.getMinutes()).padStart(2, '0')} ${time.getHours() < 12 ? 'AM' : 'PM'}`\n\t],\n\t[\n\t\t'Z',\n\t\t(time) => {\n\t\t\tconst offset = time.getTimezoneOffset();\n\t\t\tconst unsigned = offset >= 0;\n\t\t\tconst absolute = Math.abs(offset);\n\t\t\t/* istanbul ignore next: whether it's signed or unsigned, depends on where the machine is, I cannot control this. */\n\t\t\treturn `${unsigned ? '+' : '-'}${String(Math.floor(absolute / 60)).padStart(2, '0')}:${String(absolute % 60).padStart(2, '0')}`;\n\t\t}\n\t],\n\t[\n\t\t'ZZ',\n\t\t(time) => {\n\t\t\tconst offset = time.getTimezoneOffset();\n\t\t\tconst unsigned = offset >= 0;\n\t\t\tconst absolute = Math.abs(offset);\n\t\t\t/* istanbul ignore next: whether it's signed or unsigned, depends on where the machine is, I cannot control this. */\n\t\t\treturn `${unsigned ? '+' : '-'}${String(Math.floor(absolute / 60)).padStart(2, '0')}:${String(absolute % 60).padStart(2, '0')}`;\n\t\t}\n\t]\n]);\n/* eslint-enable max-len */\n\nexport type TimeResolvable = Date | number | string;\n\nexport interface TimestampTemplateEntry {\n\ttype: string;\n\tcontent: string | null;\n}\n\n/**\n * Timestamp class, parses the pattern once, displays the desired Date or UNIX timestamp with the selected pattern.\n */\nexport class Timestamp {\n\t/**\n\t * The raw pattern\n\t * @since 1.0.0\n\t */\n\tpublic pattern: string;\n\n\t/**\n\t * @since 1.0.0\n\t */\n\tprivate template: TimestampTemplateEntry[];\n\n\t/**\n\t * Starts a new Timestamp and parses the pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t */\n\tpublic constructor(pattern: string) {\n\t\tthis.pattern = pattern;\n\t\tthis.template = Timestamp.parse(pattern);\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param time The time to display\n\t */\n\tpublic display(time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(this.template, time);\n\t}\n\n\t/**\n\t * Display the current date utc with the current pattern.\n\t * @since 1.0.0\n\t * @param time The time to display in utc\n\t */\n\tpublic displayUTC(time: TimeResolvable): string {\n\t\treturn Timestamp.display(this.template, Timestamp.utc(time));\n\t}\n\n\t/**\n\t * Edits the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The new pattern for this instance\n\t * @chainable\n\t */\n\tpublic edit(pattern: string): this {\n\t\tthis.pattern = pattern;\n\t\tthis.template = Timestamp.parse(pattern);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Defines the toString behavior of Timestamp.\n\t */\n\tpublic toString(): string {\n\t\treturn this.display();\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t * @param time The time to display\n\t */\n\tpublic static displayArbitrary(pattern: string, time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(Timestamp.parse(pattern), time);\n\t}\n\n\t/**\n\t * Display the current date utc with the current pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t * @param time The time to display\n\t */\n\tpublic static displayUTCArbitrary(pattern: string, time: TimeResolvable = new Date()): string {\n\t\treturn Timestamp.display(Timestamp.parse(pattern), Timestamp.utc(time));\n\t}\n\n\t/**\n\t * Creates a UTC Date object to work with.\n\t * @since 1.0.0\n\t * @param time The date to convert to utc\n\t */\n\tpublic static utc(time: Date | number | string = new Date()): Date {\n\t\ttime = Timestamp.resolveDate(time);\n\t\treturn new Date(time.valueOf() + time.getTimezoneOffset() * 60000);\n\t}\n\n\t/**\n\t * Display the current date with the current pattern.\n\t * @since 1.0.0\n\t * @param template The pattern to parse\n\t * @param time The time to display\n\t */\n\tprivate static display(template: TimestampTemplateEntry[], time: Date | number | string): string {\n\t\tlet output = '';\n\t\tconst parsedTime = Timestamp.resolveDate(time);\n\t\tfor (const { content, type } of template) output += content || tokenResolvers.get(type)!(parsedTime);\n\t\treturn output;\n\t}\n\n\t/**\n\t * Parses the pattern.\n\t * @since 1.0.0\n\t * @param pattern The pattern to parse\n\t */\n\tprivate static parse(pattern: string): TimestampTemplateEntry[] {\n\t\tconst template: TimestampTemplateEntry[] = [];\n\t\tfor (let i = 0; i < pattern.length; i++) {\n\t\t\tlet current = '';\n\t\t\tconst currentChar = pattern[i];\n\t\t\tconst tokenMax = tokens.get(currentChar);\n\t\t\tif (typeof tokenMax === 'number') {\n\t\t\t\tcurrent += currentChar;\n\t\t\t\twhile (pattern[i + 1] === currentChar && current.length < tokenMax) current += pattern[++i];\n\t\t\t\ttemplate.push({ type: current, content: null });\n\t\t\t} else if (currentChar === '[') {\n\t\t\t\twhile (i + 1 < pattern.length && pattern[i + 1] !== ']') current += pattern[++i];\n\t\t\t\ti++;\n\t\t\t\ttemplate.push({ type: 'literal', content: current || '[' });\n\t\t\t} else {\n\t\t\t\tcurrent += currentChar;\n\t\t\t\twhile (i + 1 < pattern.length && !tokens.has(pattern[i + 1]) && pattern[i + 1] !== '[') current += pattern[++i];\n\t\t\t\ttemplate.push({ type: 'literal', content: current });\n\t\t\t}\n\t\t}\n\n\t\treturn template;\n\t}\n\n\t/**\n\t * Resolves a date.\n\t * @since 1.0.0\n\t * @param time The time to parse\n\t */\n\tprivate static resolveDate(time: TimeResolvable): Date {\n\t\treturn time instanceof Date ? time : new Date(time);\n\t}\n}\n","/**\n * Manages timers so that this application can be cleanly exited\n */\nexport class TimerManager extends null {\n\t/**\n\t * A set of timeouts to clear on destroy\n\t */\n\tprivate static storedTimeouts = new Set<NodeJS.Timeout>();\n\n\t/**\n\t * A set of intervals to clear on destroy\n\t */\n\tprivate static storedIntervals = new Set<NodeJS.Timeout>();\n\n\t/**\n\t * Creates a timeout gets cleared when destroyed\n\t * @param fn callback function\n\t * @param delay amount of time before running the callback\n\t * @param args additional arguments to pass back to the callback\n\t */\n\tpublic static setTimeout<A = unknown>(fn: (...args: A[]) => void, delay: number, ...args: A[]): NodeJS.Timeout {\n\t\tconst timeout = setTimeout(() => {\n\t\t\tthis.storedTimeouts.delete(timeout);\n\t\t\tfn(...args);\n\t\t}, delay);\n\t\tthis.storedTimeouts.add(timeout);\n\t\treturn timeout;\n\t}\n\n\t/**\n\t * Clears a timeout created through this class\n\t * @param timeout The timeout to clear\n\t */\n\tpublic static clearTimeout(timeout: NodeJS.Timeout): void {\n\t\tclearTimeout(timeout);\n\t\tthis.storedTimeouts.delete(timeout);\n\t}\n\n\t/**\n\t * Creates an interval gets cleared when destroyed\n\t * @param fn callback function\n\t * @param delay amount of time before running the callback\n\t * @param args additional arguments to pass back to the callback\n\t */\n\tpublic static setInterval<A = unknown>(fn: (...args: A[]) => void, delay: number, ...args: A[]): NodeJS.Timeout {\n\t\tconst interval = setInterval(fn, delay, ...args);\n\t\tthis.storedIntervals.add(interval);\n\t\treturn interval;\n\t}\n\n\t/**\n\t * Clears an internal created through this class\n\t * @param interval The interval to clear\n\t */\n\tpublic static clearInterval(interval: NodeJS.Timeout): void {\n\t\tclearInterval(interval);\n\t\tthis.storedIntervals.delete(interval);\n\t}\n\n\t/**\n\t * Clears running timeouts and intervals created through this class so NodeJS can gracefully exit\n\t */\n\tpublic static destroy(): void {\n\t\tfor (const i of this.storedTimeouts) clearTimeout(i);\n\t\tfor (const i of this.storedIntervals) clearInterval(i);\n\t\tthis.storedTimeouts.clear();\n\t\tthis.storedIntervals.clear();\n\t}\n}\n"],"names":["TimeTypes","kTimeDurations","DurationFormatter","[object Object]","units","DEFAULT_UNITS","duration","precision","output","negative","type","timeDuration","substraction","floored","Math","floor","push","addUnit","this","length","join","second","time","unit","Reflect","has","get","DEFAULT","Time","days","months","tokens","Map","partRegex","wildcardRegex","allowedNum","predefined","@annually","@yearly","@monthly","@weekly","@daily","@hourly","cronTokens","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","sun","mon","tue","wed","thu","fri","sat","tokensRegex","RegExp","Object","keys","year","1","month","week","day","hour","minute","Cron","cron","toLowerCase","normalized","normalize","minutes","hours","dows","parseString","outset","Date","origin","includes","getUTCDate","getUTCMonth","getUTCDay","next","getTime","UTC","getUTCFullYear","now","getUTCHours","getUTCMinutes","split","map","val","i","replace","match","random","toString","String","parts","Error","part","parsePart","cronPart","id","res","Set","sort","a","b","wild","minStr","maxStr","step","exec","min","max","parseInt","range","e","t","n","Array","fill","r","Duration","pattern","offset","parse","fromNow","dateFrom","date","result","kCommaRegex","kAanRegex","kPatternRegex","_","Number","tokenResolvers","getFullYear","slice","getMonth","padStart","getDate","endsWith","getDay","valueOf","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","unsigned","absolute","abs","Timestamp","template","display","utc","resolveDate","parsedTime","content","current","currentChar","tokenMax","TimerManager","fn","delay","args","timeout","setTimeout","storedTimeouts","delete","add","clearTimeout","interval","setInterval","storedIntervals","clearInterval","clear"],"mappings":"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"}