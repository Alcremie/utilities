{"version":3,"file":"index.js","sources":["../src/lib/codeBlock.ts","../src/lib/splitText.ts","../src/lib/isObject.ts","../src/lib/isPrimitive.ts","../src/lib/deepClone.ts","../src/lib/inlineCodeBlock.ts","../src/lib/isFunction.ts","../src/lib/isNullOrUndefined.ts","../src/lib/regExpEsc.ts","../src/lib/toTitleCase.ts","../src/lib/arrayStrictEquals.ts","../src/lib/chunk.ts","../src/lib/classExtends.ts","../src/lib/cutText.ts","../src/lib/isClass.ts","../src/lib/isNumber.ts","../src/lib/isThenable.ts","../src/lib/makeObject.ts","../src/lib/mergeDefault.ts","../src/lib/mergeObjects.ts","../src/lib/noop.ts","../src/lib/objectToTuples.ts","../src/lib/parseUrl.ts","../src/lib/range.ts","../src/lib/roundNumber.ts","../src/lib/tryParse.ts"],"sourcesContent":["const zws = String.fromCharCode(8203);\n\n/**\n * Wraps text in a markdown codeblock with optionally a language indicator for syntax highlighting\n * @param language The codeblock language\n * @param expression The expression to be wrapped in the codeblock\n */\nexport function codeBlock<T extends unknown>(language: string, expression: T): string {\n\tif (typeof expression === 'string') {\n\t\tif (expression.length === 0) return `\\`\\`\\`${zws}\\`\\`\\``;\n\t\treturn `\\`\\`\\`${language}\\n${expression.replace(/```/, `\\`${zws}\\`\\``).replace(/`$/g, `\\`${zws}`)}\\`\\`\\``;\n\t}\n\treturn `\\`\\`\\`${language}\\n${expression || zws}\\`\\`\\``;\n}\n","/**\n * Split a string by its latest space character in a range from the character 0 to the selected one.\n * @param str The text to split.\n * @param length The length of the desired string.\n * @param char The character to split with\n * @copyright 2019 Antonio Román\n * @license Apache-2.0\n */\nexport function splitText(str: string, length: number, char = ' ') {\n\tconst x = str.substring(0, length).lastIndexOf(char);\n\tconst pos = x === -1 ? length : x;\n\treturn str.substring(0, pos);\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n/**\n * Verify if the input is an object literal (or class).\n * @param input The object to verify\n */\nexport function isObject(input: unknown): input is Record<PropertyKey, unknown> | object {\n\treturn typeof input === 'object' && input ? input.constructor === Object : false;\n}\n","const primitiveTypes = ['string', 'bigint', 'number', 'boolean'];\n\n/**\n * Check whether a value is a primitive\n * @param input The input to check\n */\nexport function isPrimitive(input: unknown): input is string | bigint | number | boolean {\n\treturn primitiveTypes.includes(typeof input);\n}\n","import { isObject } from './isObject';\nimport { isPrimitive } from './isPrimitive';\n\n/**\n * Deep clone an object\n * @param source The object to clone\n */\nexport function deepClone<T>(source: T): T {\n\t// Check if it's a primitive (with exception of function and null, which is typeof object)\n\tif (source === null || isPrimitive(source)) return source;\n\tif (Array.isArray(source)) {\n\t\tconst output = ([] as unknown) as T & T extends (infer S)[] ? S[] : never;\n\t\tfor (const value of source) output.push(deepClone(value));\n\t\treturn (output as unknown) as T;\n\t}\n\tif (isObject(source)) {\n\t\tconst output = {} as Record<PropertyKey, unknown>;\n\t\tfor (const [key, value] of Object.entries(source)) output[key] = deepClone(value);\n\t\treturn (output as unknown) as T;\n\t}\n\tif (source instanceof Map) {\n\t\tconst output = (new (source.constructor as MapConstructor)() as unknown) as T & T extends Map<infer K, infer V> ? Map<K, V> : never;\n\t\tfor (const [key, value] of source.entries()) output.set(key, deepClone(value));\n\t\treturn (output as unknown) as T;\n\t}\n\tif (source instanceof Set) {\n\t\tconst output = (new (source.constructor as SetConstructor)() as unknown) as T & T extends Set<infer K> ? Set<K> : never;\n\t\tfor (const value of source.values()) output.add(deepClone(value));\n\t\treturn (output as unknown) as T;\n\t}\n\treturn source;\n}\n","const zws = String.fromCharCode(8203);\n\n/**\n * Wraps text in a markdown inline codeblock\n * @param expression The expression to be wrapped in the codeblock\n */\nexport function inlineCodeBlock(input: string): string {\n\treturn `\\`${input.replace(/ /g, '\\u00A0').replace(/`/g, `\\`${zws}`)}\\``;\n}\n","/**\n * Verify if the input is a function.\n * @param input The function to verify\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(input: unknown): input is Function {\n\treturn typeof input === 'function';\n}\n","/**\n * Checks whether or not a value is null or undefined\n * @param value The value to check\n */\nexport function isNullOrUndefined(value: unknown): value is undefined | null {\n\treturn value === undefined || value === null;\n}\n","// eslint-disable-next-line @typescript-eslint/naming-convention\nconst REGEXPESC = /[-/\\\\^$*+?.()|[\\]{}]/g;\n\n/**\n * Cleans a string from regex injection\n * @param str The string to clean\n */\nexport function regExpEsc(str: string): string {\n\treturn str.replace(REGEXPESC, '\\\\$&');\n}\n","// eslint-disable-next-line @typescript-eslint/naming-convention\nconst TOTITLECASE = /[A-Za-zÀ-ÖØ-öø-ÿ]\\S*/g;\nconst titleCaseVariants: Record<string, string> = {\n\ttextchannel: 'TextChannel',\n\tvoicechannel: 'VoiceChannel',\n\tcategorychannel: 'CategoryChannel',\n\tguildmember: 'GuildMember'\n};\n\n/**\n * Converts a string to Title Case\n * @description This is designed to also ensure common Discord PascalCased strings\n * \t\t\t\tare put in their TitleCase titleCaseVariants. See below for the full list.\n * @param str The string to title case\n * @terms\n * This table lists how certain terms are converted, these are case insensitive.\n * Any terms not included are converted to regular Titlecase.\n *\n *      | Term            |    Converted To |\n *      |-----------------|-----------------|\n *      | textchannel     |     TextChannel |\n *      | voicechannel    |    VoiceChannel |\n *      | categorychannel | CategoryChannel |\n *      | guildmember     |     GuildMember |\n */\nexport function toTitleCase(str: string): string {\n\treturn str.replace(TOTITLECASE, (txt) => titleCaseVariants[txt] || txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n","/**\n * Compare if both arrays are strictly equal\n * @param arr1 The array to compare to\n * @param arr2 The array to compare with\n */\nexport function arrayStrictEquals<T extends readonly unknown[]>(arr1: T, arr2: T): boolean {\n\tif (arr1 === arr2) return true;\n\tif (arr1.length !== arr2.length) return false;\n\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i] || typeof arr1[i] !== typeof arr2[i]) return false;\n\t}\n\treturn true;\n}\n","/**\n * Splits up an array into chunks\n * @param array The array to chunk up\n * @param chunkSize The size of each individual chunk\n */\nexport function chunk<T>(array: readonly T[], chunkSize: number): T[][] {\n\tif (!Array.isArray(array)) throw new TypeError('entries must be an array.');\n\tif (!Number.isInteger(chunkSize)) throw new TypeError('chunkSize must be an integer.');\n\tif (chunkSize < 1) throw new RangeError('chunkSize must be 1 or greater.');\n\tconst clone: T[] = array.slice();\n\tconst chunks: T[][] = [];\n\twhile (clone.length) chunks.push(clone.splice(0, chunkSize));\n\treturn chunks;\n}\n","import type { Ctor } from './utilityTypes';\n\n/**\n * Checks whether or not the value class extends the base class.\n * @param value The constructor to be checked against.\n * @param base The base constructor.\n */\nexport function classExtends<T extends Ctor>(value: Ctor, base: T): value is T {\n\tlet ctor: Ctor | null = value;\n\twhile (ctor !== null) {\n\t\tif (ctor === base) return true;\n\t\tctor = Object.getPrototypeOf(ctor);\n\t}\n\n\treturn false;\n}\n","import { splitText } from './splitText';\n\n/**\n * Split a text by its latest space character in a range from the character 0 to the selected one.\n * @param str The text to split.\n * @param length The length of the desired string.\n * @copyright 2019 Antonio Román\n * @license Apache-2.0\n */\nexport function cutText(str: string, length: number) {\n\tif (str.length < length) return str;\n\tconst cut = splitText(str, length - 3);\n\tif (cut.length < length - 3) return `${cut}...`;\n\treturn `${cut.slice(0, length - 3)}...`;\n}\n","import type { Ctor } from './utilityTypes';\n\n/**\n * Verify if the input is a class constructor.\n * @param input The function to verify\n */\nexport function isClass(input: unknown): input is Ctor {\n\treturn typeof input === 'function' && typeof input.prototype === 'object';\n}\n","/**\n * Verify if a number is a finite number.\n * @param input The number to verify\n */\nexport function isNumber(input: unknown): input is number {\n\treturn typeof input === 'number' && !isNaN(input) && Number.isFinite(input);\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { isFunction } from './isFunction';\n\nexport interface Thenable {\n\tthen: Function;\n\tcatch: Function;\n}\n\nfunction hasThen(input: { then?: Function }): boolean {\n\treturn Reflect.has(input, 'then') && isFunction(input.then);\n}\n\nfunction hasCatch(input: { catch?: Function }): boolean {\n\treturn Reflect.has(input, 'catch') && isFunction(input.catch);\n}\n\n/**\n * Verify if an object is a promise.\n * @param input The promise to verify\n */\nexport function isThenable(input: unknown): input is Thenable {\n\tif (typeof input !== 'object' || input === null) return false;\n\treturn input instanceof Promise || (input !== Promise.prototype && hasThen(input) && hasCatch(input));\n}\n","/**\n * Turn a dotted path into a json object.\n * @param path The dotted path\n * @param value The value\n * @param obj The object to edit\n */\nexport function makeObject(path: string, value: unknown, obj: Record<string, unknown> = {}): Record<string, unknown> {\n\tif (path.includes('.')) {\n\t\tconst route = path.split('.');\n\t\tconst lastKey = route.pop() as string;\n\t\tlet reference = obj;\n\t\tfor (const key of route) {\n\t\t\tif (!reference[key]) reference[key] = {};\n\t\t\treference = reference[key] as Record<string, unknown>;\n\t\t}\n\t\treference[lastKey] = value;\n\t} else {\n\t\tobj[path] = value;\n\t}\n\treturn obj;\n}\n","import { deepClone } from './deepClone';\nimport { isObject } from './isObject';\nimport type { DeepRequired } from './utilityTypes';\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions, @typescript-eslint/ban-types\ntype NonNullObject = {};\n\n/**\n * Deep merges 2 objects. Properties from the second parameter are applied to the first.\n * @remark `overwrites` is also mutated!\n * @remark If the value of a key in `overwrites` is `undefined` then the value of that same key in `base` is used instead!\n * @remark This is essentially `{ ...base, ...overwrites }` but recursively\n * @param base Base object\n * @param overwrites Overwrites to apply\n * @example\n * ```ts\n * const base = { a: 0, b: 1 };\n * const overwrites = {}; // will be { a: 0, b: 1 } after merge\n * mergeDefault(base, overwrites) // { a: 0, b: 1 }\n * ```\n * @example\n * ```ts\n * const base = { a: 0, b: 1 };\n * const overwrites = { a: 2, i: 3 };\n * mergeDefault(base, overwrites) // { a: 2, i: 3, b: 1 };\n * ```\n * @example\n * ```ts\n * const base = { a: 0, b: 1 };\n * const overwrites = { a: null };\n * mergeDefault(base, overwrites) // { a: null, b: 1 };\n * ```\n * @example\n * ```ts\n * const base = { a: 0, b: 1 };\n * const overwrites = { a: undefined };\n * mergeDefault(base, overwrites) // { a: 0, b: 1 };\n * ```\n * @example\n * ```ts\n * const base = { a: null };\n * const overwrites = { a: { b: 5 } };\n * mergeDefault(base, overwrites) // { a: { b: 5 } };\n * ```\n */\nexport function mergeDefault<A extends NonNullObject, B extends Partial<A>>(base: A, overwrites?: B): DeepRequired<A & B> {\n\t// If no overwrites are specified then deep clone the base\n\tif (!overwrites) return deepClone(base) as DeepRequired<A & B>;\n\n\tfor (const [baseKey, baseValue] of Object.entries(base)) {\n\t\tconst overwritesValueAtBaseKey = Reflect.get(overwrites, baseKey);\n\n\t\tif (typeof overwritesValueAtBaseKey === 'undefined') {\n\t\t\tReflect.set(overwrites, baseKey, deepClone(baseValue));\n\t\t} else if (isObject(overwritesValueAtBaseKey)) {\n\t\t\tReflect.set(overwrites, baseKey, mergeDefault((baseValue ?? {}) as NonNullObject, overwritesValueAtBaseKey));\n\t\t}\n\t}\n\n\treturn overwrites as DeepRequired<A & B>;\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { isObject } from './isObject';\n\n/**\n * Merges two objects\n * @param objTarget The object to be merged\n * @param objSource The object to merge\n */\nexport function mergeObjects<A extends object, B extends object>(objTarget: A, objSource: Readonly<B>): A & B {\n\tfor (const [key, value] of Object.entries(objSource)) {\n\t\tconst targetValue = Reflect.get(objTarget, key);\n\t\tif (isObject(value)) {\n\t\t\tReflect.set(objTarget, key, isObject(targetValue) ? mergeObjects(targetValue, value as object) : value);\n\t\t} else if (!isObject(targetValue)) {\n\t\t\tReflect.set(objTarget, key, value);\n\t\t}\n\t}\n\n\treturn objTarget as A & B;\n}\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n","import { isObject } from './isObject';\n\n/**\n * Convert an object to a tuple\n * @param value The object to convert\n * @param prefix The prefix for the key\n */\nexport function objectToTuples(original: Record<string, unknown>, prefix = ''): [string, unknown][] {\n\tconst entries: [string, unknown][] = [];\n\tfor (const [key, value] of Object.entries(original)) {\n\t\tif (isObject(value)) {\n\t\t\tentries.push(...objectToTuples(value as Record<string, unknown>, `${prefix}${key}.`));\n\t\t} else {\n\t\t\tentries.push([`${prefix}${key}`, value]);\n\t\t}\n\t}\n\n\treturn entries;\n}\n","/**\n * Parses an URL, returns null if invalid.\n * @param url The url to parse\n */\nexport function parseURL(url: string) {\n\ttry {\n\t\t// @ts-expect-error URL is globally available in NodeJS and browsers\n\t\treturn new URL(url);\n\t} catch {\n\t\treturn null;\n\t}\n}\n","/**\n * Get an array of numbers with the selected range\n * @param min The minimum value\n * @param max The maximum value\n * @param step The step value\n */\nexport function range(min: number, max: number, step: number): number[] {\n\treturn new Array(Math.floor((max - min) / step) + 1).fill(0).map((_val, i) => min + i * step);\n}\n","/**\n * Properly rounds up or down a number.\n * Also supports strings using an exponent to indicate large or small numbers.\n * @param num The number to round off\n * @param scale The amount of decimals to retain\n */\nexport function roundNumber(num: number | string, scale = 0) {\n\tif (!num.toString().includes('e')) {\n\t\treturn Number(`${Math.round(Number(`${num}e+${scale}`))}e-${scale}`);\n\t}\n\tconst arr = `${num}`.split('e');\n\tlet sig = '';\n\n\tif (Number(arr[1]) + scale > 0) {\n\t\tsig = '+';\n\t}\n\n\treturn Number(`${Math.round(Number(`${Number(arr[0])}e${sig}${Number(arr[1]) + scale}`))}e-${scale}`);\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n/**\n * Try parse a stringified JSON string.\n * @param value The value to parse\n */\nexport function tryParse(value: string): object | string {\n\ttry {\n\t\treturn JSON.parse(value);\n\t} catch (err) {\n\t\treturn value;\n\t}\n}\n"],"names":["zws","String","fromCharCode","splitText","str","length","char","x","substring","lastIndexOf","pos","isObject","input","constructor","Object","primitiveTypes","isPrimitive","includes","deepClone","source","Array","isArray","output","value","push","key","entries","Map","set","Set","values","add","isFunction","isNullOrUndefined","REGEXPESC","TOTITLECASE","titleCaseVariants","textchannel","voicechannel","categorychannel","guildmember","arrayStrictEquals","arr1","arr2","i","chunk","array","chunkSize","TypeError","Number","isInteger","RangeError","clone","slice","chunks","splice","classExtends","base","ctor","getPrototypeOf","codeBlock","language","expression","replace","cutText","cut","inlineCodeBlock","isClass","prototype","isNumber","isNaN","isFinite","isThenable","Promise","hasThen","Reflect","has","then","hasCatch","catch","makeObject","path","obj","route","split","lastKey","pop","reference","mergeDefault","overwrites","baseKey","baseValue","overwritesValueAtBaseKey","get","mergeObjects","objTarget","objSource","targetValue","noop","objectToTuples","original","prefix","parseURL","url","URL","range","min","max","step","Math","floor","fill","map","_val","regExpEsc","roundNumber","num","scale","toString","round","arr","sig","toTitleCase","txt","charAt","toUpperCase","substr","toLowerCase","tryParse","JSON","parse","err"],"mappings":"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"}